def predefined():
    ds = "arscl"
    folder = "CAO-CE"
    """
    ct = [start_day, start_minute, end_day, end_minute]
    the period is from December 1, 2019 to May 31, 2020, so its 183 days in all and within a
    day there are 1440 minutes. 60 minutes is 1 hour and 60 seconds is a minute.
    ct = [0:182, 0:1439, 0:182, 0:1439]
    
    eg. lets say your date is from 08:12:28 13 Mar 2020,to 09:06:36 13 Mar 2020.
    13th of March is day 103.
    For the start date which is 08:12:28... 60 minutes * 08 which is 480 plus the 12 making 492. since the seconds is less than 30 seconds, we
    can ignore that or maintain the same time.
    For the end date which is 09:06:36. Since the seconds is more than 30 seconds, we will add one to the minute making  09:07:00. The calculation
    of this goes as 60 minutes * 09 making 540. So 540 plus 07 making 547.
    
    """
    #ct = np.loadtxt("/home/clackner/CAO/Scripts/txt_files/cao_cases_m.txt", dtype = "int", delimiter = "\t", skiprows = 0)
    #ct = [[8,540,8,1140,600]] # PL1
    #ct = [[103, 180, 103, 360, 180], [104, 180, 104, 360, 180]] # christians
    #ct = [[103, 180, 104, 299, 119]] # my own
   #### vertical structure of KAZR, Christian algorithm
    #ct = [[103, 240, 103, 540, 300], [103, 540, 103, 840, 300], [103, 840, 103, 1140, 300], [103, 1140, 103, 1440, 300], [104, 0, 104, 300, 300]] # every 5hour
    #ct =  [[103, 492, 103, 547, 55],[103, 553, 103, 598, 45],[103, 600, 103, 612, 12],[103, 615, 103, 629, 14],[103, 623, 103, 647, 24],[103, 643, 103, 659, 16],
#[103, 661, 103, 692, 31],[103, 691, 103, 712, 21],[103, 708, 103, 729, 21],[103, 723, 103, 758, 35],[103, 753, 103, 795, 42],[103, 833, 103, 845, 12],[103, 843, 103, 871, 28],
#[103, 910, 103, 945, 35],[103, 948, 103, 973, 25],[103, 972, 103, 994, 22],[103, 990, 103, 998, 8],[103, 1004, 103, 1034, 30],[103, 1033, 103, 1066, 33],
#[103, 1090, 103, 1108, 18],[103, 1107, 103, 1130, 23],[103, 1156, 103, 1194, 38],[103, 1187, 103, 1216, 29],[103, 1214, 103, 1248, 34],[103, 1249, 103, 1282, 33],
#[103, 1288, 103, 1311, 23],[103, 1308, 103, 1333, 25],[103, 1348, 103, 1380, 32],[103, 1419, 104, 16, -1403],[104, 13, 104, 31, 18],[104, 67, 104, 84, 17],
#[104, 139, 104, 155, 16],[104, 163, 104, 193, 30],[104, 197, 104, 221, 24],[104, 237, 104, 272, 35],[104, 268, 104, 290, 22],[104, 290, 104, 320, 30]]

    #ct = [[103, 492, 103, 547, 55]]
    
    
    ###### cell evolution from TOBAC
    ct = [[103, 465, 103, 530, 65]]
    
    #ct = [[103, 465, 103, 530, 65], [103, 515, 103, 590, 75], [103, 585, 103, 660, 75], [103, 575, 103, 635, 60], [103, 635, 103, 645, 10], [103, 645, 103, 750, 105],
    #[103, 660, 103, 740, 80], [103, 620, 103, 715, 95], [103, 715, 103, 730, 15], [103, 670, 103, 770, 100], [103, 710, 103, 775, 65], [103, 785, 103, 860, 75],
    #[103, 845, 103, 855, 10], [103, 885, 103, 965, 80], [103, 945, 103, 995, 50], [103, 920, 103, 985, 65], [103, 970, 103, 1085, 115], [103, 1000, 103, 1020, 20],
    #[103, 985, 103, 1105, 120], [103, 1045, 103, 1100, 55], [103, 945, 103, 1125, 180], [103, 1055, 103, 1195, 140], [103, 1100, 103, 1195, 95], [103, 1125, 103, 1245, 120],
    #[103, 1225, 103, 1280, 55], [103, 1245, 103, 1315, 70], [103, 1310, 103, 1345, 35], [103, 1345, 104, 0, -1345], [103, 1435, 104, 20, -1415], [104, 0, 104, 65, 65],
    #[104, 50, 104, 70, 20], [104, 140, 104, 155, 15], [104, 140, 104, 205, 65], [104, 200, 104, 260, 60], [104, 250, 104, 300, 50], [104, 250, 104, 300, 50], [104, 250, 104, 300, 50]]


   
   



    # ct = [[65,420,65,1020,600]] # PL2
    # ct = [[110,510,110,1050,540]] # PL3
    # ct = [[3,480,3,840,360]] # WAI case
    #ct = [[103,480,103,840,360], [146,480,146,840,360]] # open and closed cell
    
    





    # ct = []
    # for i in range(0,183):
    #     for j in range(0,8):
    #         ed = int((i*1440+180*(j+2))/1440)
    #         ct.append([i,180*j,ed,360+180*j-(ed-i)*1440,360])

    pn = {"reflectivity": 0,
          "velocity": 1,
          "spectrum width": 2,
          "cloud phase": -1,
          "water path": -1,
          "surface": -1,
          "AERI": -1,
          "MPL": -1,
          "iwc": -1,
          }
    
    '''
    pn = {"reflectivity": 0,
          "velocity": 1,
          "spectrum width": 2,
          "cloud phase": -1,
          "water path": 3,
          "surface": 4,
          "AERI": -1,
          "MPL": -1,
          "iwc": -1,
          }
    '''
    
    return ds, pn, ct, folder
